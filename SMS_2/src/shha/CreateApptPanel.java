/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shha;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import static shha.mainGUI2.apptContainerPanel;
import static shha.mainGUI2.defaultApptPanel;

/**
 *
 * @author Sheldon
 */
public class CreateApptPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateApptPanel
     */
    public CreateApptPanel() {
        initComponents();
        String[] doctorsArray = grabDoctors();
        String[] patientsArray = grabPatients();
        
       doctortComboBox.setModel(new javax.swing.DefaultComboBoxModel(doctorsArray));
       patientComboBox.setModel(new javax.swing.DefaultComboBoxModel(patientsArray));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        patientComboBox = new javax.swing.JComboBox();
        patientLabel1 = new javax.swing.JLabel();
        doctorLabel = new javax.swing.JLabel();
        doctortComboBox = new javax.swing.JComboBox();
        cancelButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        apptCalendar = new com.toedter.calendar.JCalendar();
        confirmMessage = new javax.swing.JLabel();
        timeScrollPane = new javax.swing.JScrollPane();
        timeTable = new javax.swing.JTable();
        dateSelectedLabel = new javax.swing.JLabel();

        containerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        patientComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        patientLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patientLabel1.setText("Patient:");

        doctorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctorLabel.setText("Doctor:");

        doctortComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        doctortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctortComboBoxActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        apptCalendar.setMaxSelectableDate(new java.util.Date(1483246799000L));
        Calendar calendar = Calendar.getInstance();
        java.util.Date now = calendar.getTime();
        apptCalendar.setMinSelectableDate(now);
        apptCalendar.setTodayButtonVisible(true);
        apptCalendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                apptCalendarPropertyChange(evt);
            }
        });

        confirmMessage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        confirmMessage.setText("Message to display if appointment is available or not!");

        timeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"7:00 AM"},
                {"8:00 AM"},
                {"9:00 AM"},
                {"10:00 AM"},
                {"11:00 AM"},
                {"12:00 PM"},
                {"1:00 PM"},
                {"2:00 PM"},
                {"3:00 PM"},
                {"4:00 PM"},
                {"5:00 PM"}
            },
            new String [] {
                "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        timeScrollPane.setViewportView(timeTable);

        dateSelectedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateSelectedLabel.setText("Date Label");

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(containerPanelLayout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(patientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(patientLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doctortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(containerPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(doctorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(apptCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateSelectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(123, 123, 123))
        );

        containerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {doctortComboBox, patientComboBox});

        containerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, confirmButton});

        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateSelectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(containerPanelLayout.createSequentialGroup()
                                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(doctorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doctortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(apptCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)))
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );

        containerPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, confirmButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(506, 506, 506))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void apptCalendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_apptCalendarPropertyChange
        dateSelectedLabel.setText(apptCalendar.getDate().toString());
    }//GEN-LAST:event_apptCalendarPropertyChange

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        apptContainerPanel.removeAll();
        apptContainerPanel.repaint();
        apptContainerPanel.revalidate();
        apptContainerPanel.add(defaultApptPanel);
        apptContainerPanel.repaint();
        apptContainerPanel.revalidate();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void doctortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctortComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctortComboBoxActionPerformed
    
    //Precondition: THe database is in an accessible state
    //Postcondition: The doctor's textbox is populated with the doctors in the
    //               database
    private String[] grabDoctors() {
        String[] doctors = null;
        Database db = new Database("SMSDB2");
        ResultSet doctorsResult = db.queryDoctors();
        String arr = null;
                
        try {
            doctorsResult.last();
            int rowCount = doctorsResult.getRow();
            doctors = new String[rowCount];
            doctorsResult.beforeFirst();
            String firstName= null;
            String lastName = null;
            String fullName = null;
            int counter = 0;
            
            while (doctorsResult.next()) {
                firstName = doctorsResult.getString(1);
                lastName = doctorsResult.getString(2);
                fullName = lastName + "," + firstName;
                doctors[counter] = fullName;
                counter++;
        }           
            
        }catch(SQLException e) {
            System.out.println("Error parsing doctors");
            System.out.println(e.toString());
        }
        
        return doctors;
        
    }
    
        //Precondition: THe database is in an accessible state
    //Postcondition: The doctor's textbox is populated with the doctors in the
    //               database
    private String[] grabPatients() {
        String[] doctors = null;
        Database db = new Database("SMSDB2");
        ResultSet doctorsResult = db.queryPatientsForAppointment();
        String arr = null;
                
        try {
            doctorsResult.last();
            int rowCount = doctorsResult.getRow();
            doctors = new String[rowCount];
            doctorsResult.beforeFirst();
            String firstName= null;
            String lastName = null;
            String fullName = null;
            int counter = 0;
            
            while (doctorsResult.next()) {
                firstName = doctorsResult.getString(1);
                lastName = doctorsResult.getString(2);
                fullName = lastName + "," + firstName;
                doctors[counter] = fullName;
                counter++;
        }           
            
        }catch(SQLException e) {
            System.out.println("Error parsing doctors");
            System.out.println(e.toString());
        }
        
        return doctors;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JCalendar apptCalendar;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel confirmMessage;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JLabel dateSelectedLabel;
    private javax.swing.JLabel doctorLabel;
    private javax.swing.JComboBox doctortComboBox;
    private javax.swing.JComboBox patientComboBox;
    private javax.swing.JLabel patientLabel1;
    private javax.swing.JScrollPane timeScrollPane;
    private javax.swing.JTable timeTable;
    // End of variables declaration//GEN-END:variables
}
